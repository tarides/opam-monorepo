EXT_LIB:=$(shell PATH="$(PATH)" ocamlc -config | tr -d '\r' | sed -ne "s/ext_lib: \.//p")
EXT_DLL:=$(shell PATH="$(PATH)" ocamlc -config | tr -d '\r' | sed -ne "s/ext_dll: \.//p")
EXT_EXE:=$(if $(filter Win32,$(shell PATH="$(PATH)" ocamlc -config | fgrep os_type)),.exe)
OCAMLBIN:=$(dir $(shell PATH="$(PATH)" command -v ocamlc))
# SITELIB must *not* be evaluated with := (because it must be evaluated *after*
# ocamlfind has been compiled)
ifeq ($(shell command -v cygpath 2>/dev/null),)
OCAMLROOT:=$(dir $(abspath $(OCAMLBIN)))
SITELIB=$(shell PATH="$(PATH)" ocamlfind printconf path)
else
OCAMLROOT:=$(shell PATH="$(PATH)" echo $(dir $(abspath $(OCAMLBIN))) | cygpath -f - -m)
SITELIB=$(shell PATH="$(PATH)" ocamlfind printconf path | cygpath -f - -m)
endif

# Package dependencies
opam-file-format.pkgbuild: findlib.pkgbuild dune-local.pkgbuild

cppo.pkgbuild: dune-local.pkgbuild

extlib.pkgbuild: findlib.pkgbuild cppo.pkgbuild

ocamlbuild.pkgbuild: findlib.pkgbuild

re.pkgbuild: dune-local.pkgbuild seq.pkgbuild findlib.pkgbuild

seq.pkgbuild: dune-local.pkgbuild

ocamlgraph.pkgbuild: dune-local.pkgbuild stdlib-shims.pkgbuild

# result.pkgbuild depends on findlib because the files are explicitly installed using it
result.pkgbuild: dune-local.pkgbuild findlib.pkgbuild

topkg.pkgbuild: findlib.pkgbuild ocamlbuild.pkgbuild result.pkgbuild

cmdliner.pkgbuild: findlib.pkgbuild ocamlbuild.pkgbuild result.pkgbuild topkg.pkgbuild

cudf.pkgbuild: findlib.pkgbuild ocamlbuild.pkgbuild extlib.pkgbuild

dose3.pkgbuild: findlib.pkgbuild ocamlbuild.pkgbuild cppo.pkgbuild extlib.pkgbuild re.pkgbuild ocamlgraph.pkgbuild cudf.pkgbuild

# mccs.pkgbuild depends on findlib because the files are explicitly installed using it
mccs.pkgbuild: dune-local.pkgbuild cudf.pkgbuild findlib.pkgbuild

opam-0install-cudf.pkgbuild: dune-local.pkgbuild cudf.pkgbuild 0install-solver.pkgbuild

0install-solver.pkgbuild: dune-local.pkgbuild

stdlib-shims.pkgbuild: dune-local.pkgbuild

dune-local.pkgbuild: findlib.pkgbuild

opam-file-format-pkg-build:
	dune build @install -p opam-file-format
	dune install -p opam-file-format opam-file-format

findlib-pkg-build:
	./configure
	make all opt install

cppo-pkg-build:
	dune build @install -p cppo
	cp _build/install/default/bin/cppo$(EXT_EXE) $(OCAMLBIN)/
	mkdir -p $(SITELIB)/cppo
	cp _build/install/default/lib/cppo/META $(SITELIB)/cppo/

extlib-pkg-build:
	make minimal=1 build install

ocamlbuild-pkg-build:
	make -f configure.make all OCAMLBUILD_PREFIX=$(OCAMLROOT) OCAMLBUILD_BINDIR=$(OCAMLBIN) OCAMLBUILD_LIBDIR=$(SITELIB) OCAML_NATIVE=true OCAML_NATIVE_TOOLS=true
	make all findlib-install

re-pkg-build:
	dune build @install -p re
	cp -LR _build/install/default/lib/re $(SITELIB)/re/

ocamlgraph-pkg-build:
	dune installed-libraries
	dune build @install -p ocamlgraph
	dune install -p ocamlgraph ocamlgraph

result-pkg-build:
	dune build @install -p result
	ocamlfind install result $(addprefix _build/install/default/lib/result/,META result.*)

EXTS1=$(EXT_LIB) mli
EXTS2=a i ti xa xs

topkg-pkg-build:
	ocaml pkg/pkg.ml build --pkg-name topkg --dev-pkg false
	ocamlfind install topkg _build/pkg/META $(addprefix _build/src/topkg.,$(EXTS1)) $(addprefix _build/src/topkg.cm,$(EXTS2)) _build/src/topkg*.cmx

cmdliner-pkg-build:
	ocaml pkg/pkg.ml build --pinned false
	ocamlfind install cmdliner _build/pkg/META $(addprefix _build/src/cmdliner.,$(EXTS1)) $(addprefix _build/src/cmdliner.cm,$(EXTS2)) _build/src/cmdliner*.cmx

cudf-pkg-build:
	make DOC= BINDIR=$(OCAMLBIN) all opt install

dose3-pkg-build:
	./configure $(if $(EXT_EXE),--prefix=$(OCAMLROOT),--bindir=/../../$(OCAMLBIN))
	make libs apps
	make install

dune-local-pkg-build:
	ocaml bootstrap.ml
	cp dune.exe $(OCAMLBIN)/dune$(EXT_EXE)

mccs-pkg-build:
	dune build @install -p mccs
	ocamlfind install mccs $(addprefix _build/install/default/lib/,$(addprefix mccs/,META libmccs_stubs.$(EXT_LIB) mccs.*) stublibs/*.$(EXT_DLL))
	cp -RL _build/install/default/lib/mccs/glpk $(SITELIB)/mccs/

opam-0install-cudf-pkg-build:
	dune build @install -p opam-0install-cudf
	dune install -p opam-0install-cudf opam-0install-cudf

0install-solver-pkg-build:
	dune build @install -p 0install-solver
	dune install -p 0install-solver 0install-solver

seq-pkg-build:
	dune build @install -p seq
	dune install -p seq seq

stdlib-shims-pkg-build:
	dune build @install -p stdlib-shims
	dune install -p stdlib-shims stdlib-shims
